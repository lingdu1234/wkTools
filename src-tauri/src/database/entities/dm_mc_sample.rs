//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "dm_mc_sample"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub hospital_id: String,
    pub hospital_name: String,
    pub instrument_id: String,
    pub instrument_code: String,
    pub instrument_sn: String,
    pub sample_code: String,
    pub sample_type: String,
    pub test_group: String,
    pub status: String,
    pub test_time: String,
    pub regent_lot: String,
    pub remark: Option<String>,
    pub desc: Option<String>,
    pub has_import_result: String,
    pub has_invalid_result: String,
    pub is_abnormal: String,
    pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    HospitalId,
    HospitalName,
    InstrumentId,
    InstrumentCode,
    InstrumentSn,
    SampleCode,
    SampleType,
    TestGroup,
    Status,
    TestTime,
    RegentLot,
    Remark,
    Desc,
    HasImportResult,
    HasInvalidResult,
    IsAbnormal,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
    HospitalId,
    InstrumentId,
    InstrumentCode,
    SampleType,
    TestGroup,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String, String, String, String, String);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::HospitalId => ColumnType::String(None).def(),
            Self::HospitalName => ColumnType::String(None).def(),
            Self::InstrumentId => ColumnType::String(None).def(),
            Self::InstrumentCode => ColumnType::String(None).def(),
            Self::InstrumentSn => ColumnType::String(None).def(),
            Self::SampleCode => ColumnType::String(None).def(),
            Self::SampleType => ColumnType::String(None).def(),
            Self::TestGroup => ColumnType::String(None).def(),
            Self::Status => ColumnType::String(None).def(),
            Self::TestTime => ColumnType::String(None).def(),
            Self::RegentLot => ColumnType::String(None).def(),
            Self::Remark => ColumnType::String(None).def().null(),
            Self::Desc => ColumnType::String(None).def().null(),
            Self::HasImportResult => ColumnType::String(None).def(),
            Self::HasInvalidResult => ColumnType::String(None).def(),
            Self::IsAbnormal => ColumnType::String(None).def(),
            Self::CreatedAt => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
